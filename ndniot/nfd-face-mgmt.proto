syntax = "proto2";
package ndn_message;

message Name {
    repeated bytes component = 8;
}

message Strategy {
    required Name name = 7;
}

// Protobuf has no "outer" message type, so we need to put the TLV XXX
// message inside an outer "typeless" XXXMessage.
message FaceEventNotificationMessage {
    message FaceEventNotification {
        required uint32 face_event_kind = 193;
        required uint64 face_id = 105;
        required bytes uri = 114;
        required bytes local_uri = 129;
        required uint32 face_scope = 132;
        required uint32 face_persistency = 133;
        required uint32 link_type = 134;
        required uint64 flags = 108;
    }

    // A RepoCommandResponseMessage has one RepoCommandResponse.
    required FaceEventNotification face_event_notification = 192;
}

message CreateFaceResponse {
    optional uint64 st_code = 102;
    optional bytes st_text = 103;
    required uint64 face_id = 105;
    required bytes uri = 114;
    required bytes local_uri = 129;
    required uint32 face_persistency = 133;
    optional uint32 base_congestion_marking_interval = 135;
    optional uint32 default_congestion_threshold = 136;
    optional uint32 mtu = 137;
    required uint64 flags = 108;
}

message ControlCommandMessage {
    message ControlParameters {
        optional Name name = 7;
        optional uint64 face_id = 105;
        optional bytes uri = 114;
        optional bytes local_uri = 129;
        optional uint64 origin = 111;
        optional uint64 cost = 106;
        optional uint64 capacity = 131;
        optional uint64 count = 132;
        optional uint64 base_cong_mark = 135;
        optional uint64 def_cong_thres = 136;
        optional uint64 mtu = 137;
        optional uint64 flags = 108;
        optional uint64 mask = 112;
        optional Strategy strategy = 107;
        optional uint64 exp_period = 109;
    }

    // A RepoCommandParameterMessage has one RepoCommandParameter.
    required ControlParameters control_parameters = 104;
}

message ControlResponseMessage {
    message ControlResponse {
        optional uint64 st_code = 102;
        optional bytes st_text = 103;
    }

    // A RepoCommandParameterMessage has one RepoCommandParameter.
    required ControlResponse control_response = 101;
}

message GeneralStatus {
    optional bytes nfd_version = 128;
    optional uint64 start_timestamp = 129;
    optional uint64 current_timestamp = 130;
    optional uint64 n_name_tree_entries = 131;
    optional uint64 n_fib_entries = 132;
    optional uint64 n_pit_entries = 133;
    optional uint64 n_measurement_entries = 134;
    optional uint64 n_cs_entries = 135;
    optional uint64 n_in_interests = 144;
    optional uint64 n_in_data = 145;
    optional uint64 n_in_nacks = 151;
    optional uint64 n_out_interests = 146;
    optional uint64 n_out_data = 147;
    optional uint64 n_out_nacks = 152;
    optional uint64 n_satisfied_interests = 153;
    optional uint64 n_unsatisfied_interests = 154;
    optional uint64 n_fragmentation_errors = 200;
    optional uint64 n_out_over_mtu = 201;
    optional uint64 n_in_lp_invalid = 202;
    optional uint64 n_reassembly_timeouts = 203;
    optional uint64 n_in_net_invalid = 204;
    optional uint64 n_acknowledged = 205;
    optional uint64 n_retransmitted = 206;
    optional uint64 n_retx_exhausted = 207;
    optional uint64 n_congestion_marked = 208;
}

message FaceStatusMessage {
    message FaceStatus {
        optional uint64 face_id = 105;
        optional bytes uri = 114;
        optional bytes local_uri = 129;
        optional uint64 exp_period = 109;
        optional uint64 face_scope = 132;
        optional uint64 face_persistency = 133;
        optional uint64 link_type = 134;
        optional uint64 base_cong_mark = 135;
        optional uint64 def_cong_thres = 136;
        optional uint64 mtu = 137;
        optional uint64 n_in_interests = 144;
        optional uint64 n_in_data = 145;
        optional uint64 n_in_nacks = 151;
        optional uint64 n_out_interests = 146;
        optional uint64 n_out_data = 147;
        optional uint64 n_out_nacks = 152;
        optional uint64 n_in_bytes = 148;
        optional uint64 n_out_bytes = 149;
        optional uint64 flags = 108;
    }

    repeated FaceStatus face_status = 128;
}

message RibStatusMessage {
    message RibEntry {
        message Route {
            optional uint64 face_id = 105;
            optional uint64 origin = 111;
            optional uint64 cost = 106;
            optional uint64 flags = 108;
            optional uint64 exp_period = 109;
        }

        optional Name name = 7;
        repeated Route route = 129;
    }

    repeated RibEntry rib_entry = 128;
}

message FaceQueryFilterMessage {
    message FaceQueryFilter{
        optional uint64 face_id = 105;
        optional bytes uri_scheme = 131;
        optional bytes uri = 114;
        optional bytes local_uri = 129;
        optional uint64 face_scope = 132;
        optional uint64 face_persistency = 133;
        optional uint32 link_type = 134;
    }
    required FaceQueryFilter face_query_filter = 150;
}

message StrategyChoiceMessage {
    message StrategyChoice {
        optional Name name = 7;
        optional Strategy strategy = 107;
    }
    repeated StrategyChoice strategy_choice = 128;
}

message CsInfoMessage {
    message CsInfo {
        optional uint64 capacity = 131;
        optional uint64 flags = 108;
        optional uint64 n_cs_entries = 135;
        optional uint64 n_hits = 129;
        optional uint64 n_misses = 130;

    }
    repeated CsInfo cs_info = 128;
}

message CsQueryMessage {
    message CsQuery {
        optional Name name = 7;
        // optional uint64 PacketSize = TBA;
        optional uint64 freshness_period = 25;
    }
    repeated CsQuery cs_query = 128;
}
